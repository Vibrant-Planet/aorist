# Default values for prefect-ui-kubernetes.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

prefect:
  busybox:
    image:
      repository: busybox
      tag: 1.28
  agent:
    create: true
    image:
      repository: prefecthq/prefect
      tag:
      pullPolicy: Always
    environment: {}
    service: {}
    replicas:
      minReplicas: 1
      maxReplicas: 1
      targetCPUUtilizationPercentage: 65
#    resources:
#      limits:
#        cpu: 100m
#        memory: 128Mi
#      requests:
#        cpu: 50m
#        memory: 64Mi
    job_resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
  website:
    create: true
    image:
      repository: prefecthq/ui
      tag:
      pullPolicy: Always
    environment: {}
    service:
      domainName: prefect.local
      name: http
      type: ClusterIP
      port: 8080
    replicas:
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 65
#    resources:
#      limits:
#        cpu: 20m
#        memory: 128Mi
#      requests:
#        cpu: 10m
#        memory: 32Mi
  scheduler:
    create: true
    image:
      repository: prefecthq/server
      tag:
      pullPolicy: Always
    environment: {}
    service: {}
    replicas:
      minReplicas: 1
      maxReplicas: 1
      targetCPUUtilizationPercentage: 65
#    resources:
#      limits:
#        cpu: 100m
#        memory: 128Mi
#      requests:
#        cpu: 50m
#        memory: 64Mi
  apollo:
    create: true
    image:
      repository: prefecthq/apollo
      tag:
      pullPolicy: Always
    environment: {}
    service:
      domainName: api.prefect.local
      name: graphql
      type: ClusterIP
      port: 4200
    replicas:
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 65
#    resources:
#      limits:
#        cpu: 100m
#        memory: 128Mi
#      requests:
#        cpu: 100m
#        memory: 128Mi
  graphql:
    create: true
    image:
      repository: prefecthq/server
      tag:
      pullPolicy: Always
    environment: {}
    service:
      name: graphql
      type: ClusterIP
      port: 4201
    replicas:
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 65
#    resources:
#      limits:
#        cpu: 200m
#        memory: 1Gi
#      requests:
#        cpu: 100m
#        memory: 256Mi
  hasura:
    create: true
    image:
      repository: hasura/graphql-engine
      tag: v1.1.0
      pullPolicy: IfNotPresent
    environment: {}
    service:
      name: graphql
      type: ClusterIP
      port: 3000
    replicas:
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 65
#    resources:
#      limits:
#        cpu: 200m
#        memory: 1Gi
#      requests:
#        cpu: 100m
#        memory: 256Mi
    secrets:
      adminSecret: hasura-secret-admin-secret

postgresql-ha:
  postgresql:
    database: prefect_server
    username: prefect
    password: test-password
    repmgrUsername: repmgr
    repmgrPassword: nil
    repmgrDatabase: repmgr
    initdbScriptsCM: prefect-ui-postgres-init-scripts
    postgresqlImage:
      registry: docker.io
      repository: bitnami/postgresql-repmgr
      tag: 11
      pullPolicy: IfNotPresent
    replicaCount: 2
    updateStrategyType: RollingUpdate
#    affinity:
#      podAntiAffinity:
#        requiredDuringSchedulingIgnoredDuringExecution:
#          - labelSelector:
#              matchExpressions:
#                - key: app.kubernetes.io/component
#                  operator: In
#                  values:
#                    - postgresql
#            topologyKey: "kubernetes.io/hostname"
#    resources:
#      limits:
#        cpu: 250m
#        memory: 256Mi
#      requests:
#        cpu: 250m
#        memory: 256Mi
    livenessProbe:
      enabled: true
    readinessProbe:
      enabled: true
    networkPolicy:
      enabled: false
    metrics:
      enabled: false
  service:
    type: 'ClusterIP'
    port: 5432
  # config to runon OpenShift
  volumePermissions:
    securityContext:
      runAsUser: "auto"
  securityContext:
    enabled: false
  shmVolume:
    enabled: true
    chmod:
      enabled: false
  persistence:
    enabled: true
    mountPath: '/bitnami/postgresql'
    subPath: ''
    accessModes:
      - ReadWriteOnce
    size: '1Gi'
  pgpool:
    livenessProbe:
      enabled: false

minio:
  mode: distributed
  disableWebUI: false
  image:
    repository: bitnami/minio
    tag: 2020.4.2-debian-10-r0
    pullPolicy: IfNotPresent
  statefulset:
    replicaCount: 4
    updateStrategy: RollingUpdate
  accessKey:
    password: 'accessKey'
    forcePassword: true
  secretKey:
    password: 'secretKey'
    forcePassword: true
#  resources:
#    limits:
#      cpu: 250m
#      memory: 256Mi
#    requests:
#      cpu: 250m
#      memory: 256Mi
#  affinity:
#    podAntiAffinity:
#      requiredDuringSchedulingIgnoredDuringExecution:
#          - labelSelector:
#              matchExpressions:
#                - key: app.kubernetes.io/component
#                  operator: In
#                  values:
#                    - minio
#            topologyKey: "kubernetes.io/hostname"
  persistence:
    enabled: true
    mountPath: '/data'
    subPath: ''
    accessModes:
      - ReadWriteOnce
    size: '1Gi'
  service:
    domainName: minio.prefect.local
    type: 'ClusterIP'
    port: 9000

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000
  # seLinuxOptions:
  #   level: 's0:c107,c29'

securityContext: {}
  # capabilities:
  #   drop:
  #     - KILL
  #     - MKNOD
  #     - SETGID
  #     - SETUID
  # readOnlyRootFilesystem: false
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  create: true
  # 'ingress' = Kubernetes Ingress
  # 'route' = OpenShift Route
  type: ingress
  annotations: {}
  tls: false
  secrets:
    cert: ""
    key: ""

nodeSelector: {}

tolerations: []

affinity: {}
