use pyo3::prelude::*;
use aorist_util::init_logging;
use aorist_core::*;

#[pymodule]
fn libaorist(_py: pyo3::prelude::Python, m: &PyModule) -> PyResult<()> {
    init_logging();
    m.add_class::<ApproveAccessSelector>()?;
    m.add_class::<RandomForestRegressionAlgorithm>()?;
    m.add_class::<SVMRegressionAlgorithm>()?;
    m.add_class::<StaticDataTable>()?;
    m.add_class::<SupervisedModel>()?;
    m.add_class::<DerivedAsset>()?;
    m.add_class::<Attribute>()?;
    m.add_class::<Predicate>()?;
    m.add_class::<SingleFileLayout>()?;
    m.add_class::<PushshiftSubredditPostsAPILayout>()?;
    m.add_class::<DynamicTabularLayout>()?;
    m.add_class::<StaticTabularLayout>()?;
    m.add_class::<DailyGranularity>()?;
    m.add_class::<DataSet>()?;
    m.add_class::<GlobalPermissionsAdmin>()?;
    m.add_class::<GzipCompression>()?;
    m.add_class::<ZipCompression>()?;
    m.add_class::<ComplianceConfig>()?;
    m.add_class::<CSVHeader>()?;
    m.add_class::<AlluxioLocation>()?;
    m.add_class::<BigQueryLocation>()?;
    m.add_class::<GCSLocation>()?;
    m.add_class::<GithubLocation>()?;
    m.add_class::<LocalFileSystemLocation>()?;
    m.add_class::<MinioLocation>()?;
    m.add_class::<S3Location>()?;
    m.add_class::<PostgresLocation>()?;
    m.add_class::<PushshiftAPILocation>()?;
    m.add_class::<SQLiteLocation>()?;
    m.add_class::<WebLocation>()?;
    m.add_class::<SingleObjectiveRegressor>()?;
    m.add_class::<GDBEncoding>()?;
    m.add_class::<CSVEncoding>()?;
    m.add_class::<TSVEncoding>()?;
    m.add_class::<NewlineDelimitedJSONEncoding>()?;
    m.add_class::<ORCEncoding>()?;
    m.add_class::<ONNXEncoding>()?;
    m.add_class::<UndefinedTabularSchema>()?;
    m.add_class::<TabularSchema>()?;
    m.add_class::<TimeOrderedTabularSchema>()?;
    m.add_class::<Universe>()?;
    m.add_class::<LocalStorageSetup>()?;
    m.add_class::<RemoteStorageSetup>()?;
    m.add_class::<ReplicationStorageSetup>()?;
    m.add_class::<ComputedFromLocalData>()?;
    m.add_class::<BigQueryStorage>()?;
    m.add_class::<SQLiteStorage>()?;
    m.add_class::<HiveTableStorage>()?;
    m.add_class::<RemoteStorage>()?;
    m.add_class::<LocalFileStorage>()?;
    m.add_class::<PostgresStorage>()?;
    m.add_class::<GitStorage>()?;
    m.add_class::<RoleBinding>()?;
    m.add_class::<IdentifierTuple>()?;
    m.add_class::<RowStruct>()?;
    m.add_class::<IntegerMeasure>()?;
    m.add_class::<Filter>()?;
    m.add_class::<User>()?;
    m.add_class::<UserGroup>()?;
    m.add_class::<EndpointConfig>()?;
    m.add_class::<AWSConfig>()?;
    m.add_class::<GCPConfig>()?;
    m.add_class::<GiteaConfig>()?;
    m.add_class::<PostgresConfig>()?;
    m.add_class::<AlluxioConfig>()?;
    m.add_class::<RangerConfig>()?;
    m.add_class::<PrestoConfig>()?;
    m.add_class::<MinioConfig>()?;
    m.add_class::<TrainedFloatMeasure>()?;
    m.add_class::<PredictionsFromTrainedFloatMeasure>()?;
    Ok(())
}
