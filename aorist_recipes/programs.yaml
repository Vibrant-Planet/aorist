---
type: Program
spec:
  use: UploadDataToAlluxio
  root: AlluxioLocation
  dialect: Python
  pip_requires:
    - alluxio==0.1.3
  preamble: |
    import alluxio
    from alluxio import option, wire
    def upload_to_alluxio(hostname, port, schema, directory, tablename, tmp_dir, source_file):
      directory = '/' + directory + '/' + schema + '/' + tablename
      client = alluxio.Client(hostname, int(port))
      opt = option.CreateDirectory(recursive=True, allow_exists=True, write_type=wire.WRITE_TYPE_MUST_CACHE)
      client.create_directory(directory, opt)
      path = directory + "/data.csv"
      if client.exists(path):
        client.delete(path)
      opt = option.CreateFile(write_type=wire.WRITE_TYPE_MUST_CACHE)
      with client.open(path, 'w', opt) as f:
        with open(tmp_dir + '/' + source_file) as source:
          try:
            f.write(source)
          except:
            pass
      print("Done uploading %s to %s" % (source_file, path))
  call: upload_to_alluxio
  args:
    - type: AncestorArgument
      spec:
        call: universe.endpoints.alluxio.as_ref().unwrap().server.clone()
        attaches: Universe
    - type: AncestorArgument
      spec:
        call: format!("{}", universe.endpoints.alluxio.as_ref().unwrap().api_port).to_string()
        attaches: Universe
    - type: AncestorArgument
      spec:
        call: data_set.name
        attaches: DataSet
    - type: AncestorArgument
      spec:
        call: universe.endpoints.alluxio.as_ref().unwrap().directory.clone()
        attaches: Universe
    - type: AncestorArgument
      spec:
        call: format!("{}_csv", static_data_table.name).to_string()
        attaches: StaticDataTable
    - type: AncestorArgument
      spec:
        call: replication_storage_setup.tmp_dir
        attaches: ReplicationStorageSetup
    - type: AncestorArgument
      spec:
        call: format!("{}.csv", static_data_table.name).to_string()
        attaches: StaticDataTable
