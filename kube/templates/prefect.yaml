apiVersion: v1
kind: Service
metadata:
  name: prefect
  namespace: aorist
spec:
  # ensure that only users on the VPN can access the service: assign internal IP for use by public hostname
  # if this is changed, the public DNS record for airflow.datascie.nz must be updated to match
  # TODO figure out how to get letsencrypt certificates, likely via DNS validation? may want a separate private-only ingress manager?
  externalIPs:
  - 172.31.8.12
  ports:
  - name: http
    port: 80
    targetPort: ui
  - name: graphql
    port: 4200
    targetPort: apollo
  selector:
    app: prefect

---

# see also https://github.com/PrefectHQ/prefect/blob/master/src/prefect/cli/docker-compose.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect
  namespace: aorist
  labels:
    app: prefect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prefect
  template:
    metadata:
      labels:
        app: prefect
    spec:
      # The official image is amd64-only at the moment, so just use that.
      # Also, ensure we don't have RAM issues with all the sidecars.
      nodeSelector:
        kubernetes.io/arch: amd64

      containers:

      # Hasura: the GraphQL API that layers on top of Postgres for querying metadata
      - name: hasura
        image: hasura/graphql-engine:v1.3.0
        command:
        - graphql-engine
        - serve
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: prefect
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: prefect
              key: postgres-pass
        - name: HASURA_GRAPHQL_DATABASE_URL
          value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@prefect-postgres:5432/prefect
        - name: HASURA_GRAPHQL_ENABLE_CONSOLE
          value: 'true'
        - name: HASURA_GRAPHQL_SERVER_PORT
          value: '3000'
        - name: HASURA_GRAPHQL_QUERY_PLAN_CACHE_SIZE
          value: '100'
        - name: HASURA_GRAPHQL_LOG_LEVEL
          value: warn
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - wget -O - http://127.0.0.1:$(HASURA_GRAPHQL_SERVER_PORT)/healthz
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 10
          failureThreshold: 60
        ports:
        - name: hasura
          containerPort: 3000
          protocol: TCP


      # GraphQL: the server's business logic that exposes GraphQL mutations
      - name: graphql
        image: prefecthq/server:core-0.14.6
        command:
        - /bin/bash
        - -c
        - prefect-server database upgrade -y && python src/prefect_server/services/graphql/server.py
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: prefect
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: prefect
              key: postgres-pass
        - name: PREFECT_SERVER__DATABASE__CONNECTION_URL
          value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@prefect-postgres:5432/prefect
        - name: PREFECT_SERVER__HASURA__ADMIN_SECRET
          valueFrom:
            secretKeyRef:
              name: prefect
              key: hasura-secret
        - name: PREFECT_SERVER__HASURA__HOST
          value: 127.0.0.1
        - name: PREFECT_CORE_VERSION
          value: UNKNOWN
        # The official docker-compose config has this check, but there is no curl in the image!
        #startupProbe:
        #  exec:
        #    command:
        #    - /bin/bash
        #    - -c
        #    - curl --fail --silent http://127.0.0.1:4201/health
        #  initialDelaySeconds: 10
        #  periodSeconds: 5
        #  timeoutSeconds: 10
        #  failureThreshold: 60
        ports:
        - name: graphql
          containerPort: 4201
          protocol: TCP


      # Towel: runs utilities that are responsible for server maintenance
      - name: towel
        image: prefecthq/server:core-0.14.6
        command:
        - python
        - src/prefect_server/services/towel/__main__.py
        env:
        - name: PREFECT_SERVER__HASURA__ADMIN_SECRET
          valueFrom:
            secretKeyRef:
              name: prefect
              key: hasura-secret
        - name: PREFECT_SERVER__HASURA__HOST
          value: 127.0.0.1


      # Apollo: the main endpoint for interacting with the server
      - name: apollo
        image: prefecthq/apollo:core-0.14.6
        command:
        - /bin/bash
        - -c
        - ./post-start.sh && npm run serve
        env:
        - name: HASURA_API_URL
          value: http://127.0.0.1:3000/v1alpha1/graphql
        - name: PREFECT_API_URL
          value: http://127.0.0.1:4201/graphql/
        - name: PREFECT_API_HEALTH_URL
          value: http://127.0.0.1:4201/health
        - name: PREFECT_SERVER__TELEMETRY__ENABLED
          value: 'false'
        - name: GRAPHQL_SERVICE_HOST
          value: http://127.0.0.1
        - name: GRAPHQL_SERVICE_PORT
          value: '4201'
        # Test GraphQL Apollo endpoint as health-check
        startupProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - curl --fail --silent http://127.0.0.1:4200/.well-known/apollo/server-health
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 10
          failureThreshold: 60
        ports:
        - name: apollo
          containerPort: 4200
          protocol: TCP


      # UI: the user interface that provides a visual dashboard for mutating and querying metadata
      # The UI is a standalone web interface and only communicates with the Apollo GraphQL API via
      #  the host from which it is accessed.
      - name: ui
        image: prefecthq/ui:core-0.14.6
        command:
        - /intercept.sh
        env:
        # URL is exposed directly to the browser, so we need to give a suitable public endpoint
        - name: PREFECT_SERVER__APOLLO_URL
          value: https://prefect.datascie.nz/graphql
        startupProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - curl --fail --silent --head http://127.0.0.1:8080/
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 10
          failureThreshold: 60
        ports:
        - name: ui
          containerPort: 8080
          protocol: TCP
